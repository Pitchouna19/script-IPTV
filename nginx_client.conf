#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Définir le dictionnaire partagé pour stocker les tokens
    lua_shared_dict token_store 10m;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /live/ {
            content_by_lua_block {
                local token_store = ngx.shared.token_store

                -- Extraire le token depuis l'URL
                local token = ngx.var.arg_token
                if not token then
                    ngx.status = 401
                    ngx.say("Accès refusé : Token manquant")
                    return
                end

                -- Vérifier si le token existe déjà dans le cache
                local exists = token_store:get(token)
                if exists then
                    ngx.status = 403
                    ngx.say("Accès refusé : Token déjà utilisé")
                    return
                end

                -- Stocker le token avec une durée de vie de 60 secondes
                token_store:set(token, true, 60)

                -- Continuer avec la requête si le token est valide et non utilisé
                ngx.say("Accès autorisé à la ressource")
            }
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # Exemple d'un autre hôte virtuel (commenté par défaut)
    #
    #server {
    #    listen       8000;
    #    server_name  example.com;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # Configuration HTTPS (commentée par défaut)
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
