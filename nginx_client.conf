#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Définir le dictionnaire partagé pour stocker les tokens
    lua_shared_dict token_store 10m;
    lua_shared_dict user_token_store 10m;

    server {
        listen       9090;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location /live/ {
            # Déclarer la variable, mais ne pas la laisser vide
            set $target_stream "";
        
            content_by_lua_block {
                local token_store = ngx.shared.token_store
                local user_token_store = ngx.shared.user_token_store
        
                -- Extraction des paramètres
                local token = ngx.var.arg_token
                local user = ngx.var.arg_user
        
                if not token then
                    ngx.status = 401
                    ngx.say("Accès refusé : Token manquant")
                    return
                end
        
                if not user then
                    ngx.status = 401
                    ngx.say("Accès refusé : Utilisateur manquant")
                    return
                end
        
                -- Vérification du token dans le cache
                local exists = token_store:get(token)
                if exists then
                    ngx.status = 403
                    ngx.say("Accès refusé : Token déjà utilisé")
                    return
                end
        
                -- Invalidation du token précédent
                local old_token = user_token_store:get(user)
                if old_token then
                    token_store:delete(old_token)
                    ngx.log(ngx.NOTICE, "Ancien token invalidé pour l'utilisateur: " .. user)
                end
        
                -- Stockage du nouveau token
                user_token_store:set(user, token, 60)
                token_store:set(token, true, 60)
        
                -- Extraction du nom de flux
                local stream_name = ngx.var.uri:match("^/live/([^?]+)")
                if not stream_name then
                    ngx.status = 404
                    ngx.say("Stream non trouvé")
                    return
                end
        
                -- Affecter le nom du stream à la variable Nginx
                ngx.var.target_stream = stream_name
            }
        
            # Utilisation correcte de la variable dans proxy_pass
            proxy_pass http://192.168.1.39:8080/live/$target_stream.flv;
            proxy_set_header Host $host;
            proxy_buffering off;
        }

        
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # Exemple d'un autre hôte virtuel (commenté par défaut)
    #
    #server {
    #    listen       8000;
    #    server_name  example.com;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # Configuration HTTPS (commentée par défaut)
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
