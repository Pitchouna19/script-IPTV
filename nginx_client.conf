#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Définir le dictionnaire partagé pour stocker les tokens
    lua_shared_dict token_store 10m;
    lua_shared_dict user_token_store 10m;

    server {
        listen       9090;
        server_name  localhost;
    
        location / {
            root   html;
            index  index.html index.htm;
        }
    
        location /live/ {
            content_by_lua_block {
                local token_store = ngx.shared.token_store
                local user_token_store = ngx.shared.user_token_store
                
                -- Log pour debug
                ngx.log(ngx.INFO, "URI original: ", ngx.var.uri)
                
                -- Extraire les parties de l'URL
                local user_path, pass_path, stream_name = ngx.var.uri:match("^/live/([^/]+)/([^/]+)/([^/]+)$")
                
                ngx.log(ngx.INFO, "Stream name: ", stream_name)
                
                if not stream_name then
                    ngx.status = 404
                    ngx.say("Stream non trouvé")
                    return
                end
    
                -- Générer un token
                local token = ngx.encode_base64(ngx.time() .. "." .. math.random(100, 999))
                
                -- Vérifier l'ancien token et le supprimer
                local old_token = user_token_store:get(user_path)
                if old_token then
                    token_store:delete(old_token)
                end
                
                -- Stocker les nouveaux tokens
                user_token_store:set(user_path, token, 60)
                token_store:set(token, true, 60)
    
                -- On laisse passer la requête originale pour le proxy
                ngx.var.target_stream = stream_name
                return ngx.exec("@srs_stream")
            }
        }
    
        location @srs_stream {
            internal;
            
            # Variables pour le proxy
            set $target_stream '';
            
            # Proxy direct vers le flux SRS
            proxy_pass http://192.168.1.39:8080/live/$target_stream.flv;
    
            # Headers spécifiques pour le streaming
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            
            # Headers pour garder l'information du client original
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Configuration cruciale pour le streaming vidéo
            proxy_buffering off;                  # Désactive le buffering pour le streaming en direct
            proxy_request_buffering off;          # Désactive le buffering des requêtes
            
            # Timeouts adaptés pour le streaming
            proxy_connect_timeout 10s;
            proxy_send_timeout 1h;
            proxy_read_timeout 1h;
            
            # Headers spécifiques pour le streaming vidéo
            add_header Cache-Control no-cache;    # Évite la mise en cache
            add_header Access-Control-Allow-Origin *;  # Permet CORS si nécessaire
            
            # Types MIME pour le streaming FLV
            types {
                application/x-flv flv;
            }
            
            # Taille de chunk pour le streaming
            proxy_busy_buffers_size 512k;
            proxy_buffers 4 512k;
            proxy_buffer_size 256k;
        }
    
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # Exemple d'un autre hôte virtuel (commenté par défaut)
    #
    #server {
    #    listen       8000;
    #    server_name  example.com;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # Configuration HTTPS (commentée par défaut)
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;
    #
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;
    #
    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;
    #
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;
    #
    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
