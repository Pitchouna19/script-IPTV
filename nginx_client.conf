worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    lua_shared_dict token_store 10m;
    lua_shared_dict user_token_store 10m;

    server {
        listen 9095;
        server_name localhost;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        location / {
            root html;
            index index.html index.htm;
        }

        location = /auth {
            content_by_lua_block {
                local cjson = require "cjson"

                ngx.req.read_body()
                local data = ngx.req.get_body_data()

                ngx.log(ngx.ERR, "Données reçues: ", data)

                local ok, json_data = pcall(cjson.decode, data)
                if not ok then
                    ngx.status = 400
                    ngx.say('{"code":2, "message": "Invalid JSON"}')
                    ngx.log(ngx.ERR, "Erreur: Impossible de décoder le JSON")
                    return
                end

                ngx.log(ngx.ERR, "Données JSON décodées: ", cjson.encode(json_data))

                local token = json_data.param and ngx.unescape_uri(json_data.param:match("token=([^&]+)"))
                local salt = json_data.param and ngx.unescape_uri(json_data.param:match("salt=([^&]+)"))
                local encoded_client_ip = json_data.param and ngx.unescape_uri(json_data.param:match("cpi=([^&]+)"))

                ngx.log(ngx.ERR, "Paramètres reçus - token: ", token, " salt: ", salt, " cpi: ", encoded_client_ip)

                if not token or not salt or not encoded_client_ip then
                    ngx.status = 400
                    ngx.say('{"code":2, "message": "Missing parameters"}')
                    ngx.log(ngx.ERR, "Erreur: Paramètres manquants dans la requête.")
                    return
                end

                local function get_secret_key()
                    local file = io.open("/etc/openresty/pass.json", "r")
                    if not file then
                        ngx.log(ngx.ERR, "Erreur: Impossible d'ouvrir /etc/openresty/pass.json")
                        return nil
                    end

                    local content = file:read("*a")
                    file:close()

                    ngx.log(ngx.ERR, "Contenu du fichier pass.json: ", content)

                    local ok, data = pcall(cjson.decode, content)
                    if not ok or not data.pass then
                        ngx.log(ngx.ERR, "Erreur: Format JSON invalide ou clé 'pass' manquante dans pass.json")
                        return nil
                    end

                    return data.pass
                end

                local function to_hex(str)
                    return (str:gsub(".", function (c)
                        return string.format("%02x", string.byte(c))
                    end))
                end

                local function generate_token(salt)
                    local secret_key = get_secret_key()
                    if not secret_key then
                        ngx.log(ngx.ERR, "Erreur: Clé secrète non trouvée")
                        return nil
                    end

                    local message = salt
                    ngx.log(ngx.ERR, "Message utilisé pour générer le token: ", message)

                    local hmac_token = ngx.hmac_sha1(secret_key, message)
                    ngx.log(ngx.ERR, "Token HMAC brut généré: ", hmac_token)

                    local hex_token = to_hex(hmac_token)
                    ngx.log(ngx.ERR, "Token HMAC en hexadécimal: ", hex_token)

                    return hex_token
                end

                local generated_token = generate_token(salt)
                ngx.log(ngx.ERR, "Token généré en hexadécimal: ", generated_token)

                if token == generated_token then
                    ngx.status = 200
                    ngx.say('{"code":0}')  -- Token valide
                    ngx.log(ngx.ERR, "Token validé avec succès")
                else
                    ngx.status = 403
                    ngx.say('{"code":1}')  -- Token invalide
                    ngx.log(ngx.ERR, "Erreur de validation du token - Token invalide")
                end
            }
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}
